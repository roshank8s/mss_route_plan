/** @odoo-module **/
import { Component, useRef, onWillStart, onMounted, useState } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { _t } from "@web/core/l10n/translation";
import { useService } from "@web/core/utils/hooks";
import { loadJS } from "@web/core/assets";

export class UnifiedRouteMapView extends Component {
    static template = "mss_route_optimization.UnifiedRouteMapView";
    static props = { readonly: Boolean, id: Number, name: String, record: Object };

    setup() {
        this.orm          = useService("orm");
        this.notification = useService("notification");
        this._gmapApiKey  = false;
        this.mapref       = useRef("googleMap");
        this.recordList   = useRef("recordList");

        // modes: 'unified' | 'delivery' | 'fsm'
        this.filters = useState({ driver: "", date: "", mode: "unified" });
        // will hold three separate arrays:
        this.unifiedSteps = [];
        this.deliverySteps= [];
        this.fsmSteps     = [];
        this.mapElements  = [];
        this.availableDrivers = useState([]);
        this.openInfoWindow   = null;

        onWillStart(async () => {
            const key = await this._getGMapAPIKey();
            if (!key) {
                this.notification.add(
                    _t("Google Map API Key not configured."),
                    { type: "danger", sticky: true }
                );
            }
            await loadJS(
                `https://maps.googleapis.com/maps/api/js?key=${key}&libraries=places,maps,directions,geometry async`
            );
        });

        onMounted(async () => {
            this.map = new google.maps.Map(this.mapref.el, {
                center: { lat: 0, lng: 0 }, zoom: 2,
            });

            try {
                // fetch all three datasets in parallel
                const [unified, delivery, fsm] = await Promise.all([
                    this.orm.call("route.unified.step", "search_read", [
                        [["step_type","in",["start","job","end"]]],
                        [
                            "id","partner_latitude","partner_longitude",
                            "display_name","driver_name","step_type",
                            "route_sequence","delivery_order_id","task_id","vehicle_id",
                            "delivery_date","planned_date_begin","delivery_address"
                        ]
                    ]),
                    this.orm.call("traktop", "search_read", [
                        [],[
                            "id","partner_latitude","partner_longitude",
                            "display_name","driver_name","step_type",
                            "route_sequence","delivery_order_id","vehicle_id",
                            "delivery_date","travel_time","distance_km","delivery_address"
                        ]
                    ]),
                    this.orm.call("field.service.route.step", "search_read", [
                        [],[
                            "id","partner_latitude","partner_longitude",
                            "display_name","driver_name","step_type",
                            "route_sequence","task_id","vehicle_id",
                            "planned_date_begin","service_duration_minutes",
                            "distance_km","delivery_address"
                        ]
                    ]),
                ]);
                this.unifiedSteps  = unified;
                this.deliverySteps = delivery.filter(r => r.step_type === "job" || r.step_type==="start"||r.step_type==="end");
                this.fsmSteps      = fsm.filter(r => r.step_type === "job" || r.step_type==="start"||r.step_type==="end");
                // build driver dropdown from union of all three
                const allDrivers = new Set([
                    ...unified.map(s=>s.driver_name),
                    ...delivery.map(s=>s.driver_name),
                    ...fsm.map(s=>s.driver_name),
                ].filter(Boolean));
                this.availableDrivers.splice(0, this.availableDrivers.length, ...[...allDrivers].sort());
            } catch (err) {
                console.error("Error fetching route data:", err);
                this.notification.add(_t("Failed to load route data."), { type: "danger" });
                return;
            }

            this._renderControls();
            this._renderData();
            this._setupMobileToggle();
        });
    }

    _renderControls() {
        const cp = document.querySelector(".o_control_panel");
        if (!cp) return;
        const ctr = document.createElement("div");
        ctr.className = "o_map_search_bar d-flex align-items-center gap-2 p-2 bg-light border-bottom";

        // driver
        const dsel = document.createElement("select");
        dsel.className = "form-select form-select-sm";
        dsel.innerHTML = `<option value="">${_t("All Drivers")}</option>`;
        this.availableDrivers.forEach(n => {
            dsel.innerHTML += `<option>${n}</option>`;
        });
        dsel.addEventListener("change", e => {
            this.filters.driver = e.target.value;
            this._renderData();
        });

        // date
        const din = document.createElement("input");
        din.type = "date";
        din.className = "form-control form-control-sm";
        din.addEventListener("input", e => {
            this.filters.date = e.target.value;
            this._renderData();
        });

        // mode buttons
        const lbl = document.createElement("span"); lbl.textContent = _t("Show:");
        const grp = document.createElement("div"); grp.className = "btn-group btn-group-sm";
        const btnU = document.createElement("button");
        const btnD = document.createElement("button");
        const btnF = document.createElement("button");
        btnU.textContent = _t("Unified");
        btnD.textContent = _t("Delivery");
        btnF.textContent = _t("Field Service");

        const setMode = m => {
            this.filters.mode = m;
            btnU.className = m==="unified" ? "btn btn-primary"     : "btn btn-outline-primary";
            btnD.className = m==="delivery"? "btn btn-primary"     : "btn btn-outline-primary";
            btnF.className = m==="fsm"     ? "btn btn-primary"     : "btn btn-outline-primary";
            this._renderData();
        };
        btnU.onclick = ()=> setMode("unified");
        btnD.onclick = ()=> setMode("delivery");
        btnF.onclick = ()=> setMode("fsm");
        grp.append(btnU,btnD,btnF);
        setMode(this.filters.mode);

        // clear
        const clr = document.createElement("button");
        clr.textContent = _t("Clear All");
        clr.className = "btn btn-light btn-sm border";
        clr.onclick = ()=>{
            this.filters.driver="";
            this.filters.date="";
            dsel.value="";
            din.value="";
            setMode("unified");
        };

        ctr.append(dsel, din, lbl, grp, clr);
        cp.insertAdjacentElement("afterend", ctr);
    }

    _clearMapAndList() {
        this.recordList.el.innerHTML = "";
        this.mapElements.forEach(el => el.setMap?.(null));
        this.mapElements = [];
    }

    _renderData() {
        this._clearMapAndList();
        const { driver, date, mode } = this.filters;

        // pick which dataset
        let steps = [];
        if (mode==="unified")   steps = this.unifiedSteps;
        else if (mode==="delivery") steps = this.deliverySteps;
        else if (mode==="fsm")      steps = this.fsmSteps;

        // filter to only the steps for the chosen mode
        // first find jobs matching driver & date
        const jobs = steps.filter(s => {
            if (s.step_type!=="job") return false;
            const dn = s.driver_name||"";
            const dv = s.delivery_date||s.planned_date_begin||"";
            return (!driver||dn===driver) && (!date||dv.startsWith(date));
        });

        const vids = [...new Set(jobs.map(j=>j.vehicle_id[0]))];
        const filtered = steps.filter(s =>
            s.vehicle_id && vids.includes(s.vehicle_id[0]) &&
            (!driver||s.driver_name===driver)
        );

        // group by vehicle
        const byV = {};
        for (const s of filtered) {
            const vid = s.vehicle_id[0];
            if (!byV[vid]) {
                const plate = s.vehicle_id[1]||"";
                byV[vid] = { label:[s.driver_name,plate].filter(Boolean).join(" / "), recs:[] };
            }
            byV[vid].recs.push(s);
        }

        // admin re-optimize button
        this.orm.call("traktop","is_admin",[]).then(isAdmin=>{
            if (isAdmin && mode==="unified") {
                const b = document.createElement("button");
                b.className="btn btn-primary btn-sm o_map_btn";
                b.style.marginBottom="5px";
                b.textContent=_t("Re-Optimize");
                b.onclick=async()=>{
                    try {
                        const act=await this.orm.call(
                            "unified.route.optimizer","action_run_unified_optimization",[]
                        );
                        act && this.env.services.action.doAction(act);
                    } catch(e){
                        console.error(e);
                        this.notification.add(_t("Optimization failed."),{type:"danger"});
                    }
                };
                this.recordList.el.appendChild(b);
            }
            this._renderVehicleRoutes(byV, isAdmin);
        });
    }

    addMarker(position,title,address,label=null,icon=null,markerPositions={}) {
        if (Object.keys(markerPositions).length) {
            const key=`${position.lat.toFixed(6)},${position.lng.toFixed(6)}`;
            markerPositions[key]=(markerPositions[key]||0)+1;
            if (markerPositions[key]>1) {
                position={ lat:position.lat+markerPositions[key]*0.0001,
                           lng:position.lng+markerPositions[key]*0.0001 };
            }
        }
        const m=new google.maps.Marker({position,map:this.map,title,icon,
            label:label?{text:label,fontSize:"12px",color:"white",fontWeight:"bold"}:null});
        const iw=new google.maps.InfoWindow({
            content:`<div><strong>${title}</strong><br/>${address}</div>`
        });
        m.addListener("click",()=>{
            this.openInfoWindow&&this.openInfoWindow.close();
            iw.open(this.map,m);
            this.openInfoWindow=iw;
        });
        m.infoWindow=iw;
        this.mapElements.push(m);
        return m;
    }

    _renderVehicleRoutes(byVehicle,isAdmin) {
        const icons={
            start:{url:"/mss_route_optimization/static/description/startEnd.svg",scaledSize:new google.maps.Size(40,40)},
            job:  {url:"/mss_route_optimization/static/description/pinpoint.svg",scaledSize:new google.maps.Size(30,30)},
            end:  {url:"/mss_route_optimization/static/description/startEnd.svg",scaledSize:new google.maps.Size(40,40)},
        };
        let hue=Math.random()*360;
        const nextColor=()=>{
            hue=(hue+137.508)%360;
            return `hsl(${Math.round(hue*10)/10},65%,50%)`;
        };
        const markerPositions={};

        for (const [vid,{label:vehLabel,recs}] of Object.entries(byVehicle)) {
            recs.sort((a,b)=>a.route_sequence-b.route_sequence);
            const jobs=recs.filter(r=>r.step_type==="job");
            if (!jobs.length) continue;

            const bounds=new google.maps.LatLngBounds();
            const col=nextColor();

            // header
            const hdr=document.createElement("li");
            hdr.textContent=vehLabel;
            Object.assign(hdr.style,{fontWeight:"bold",color:col,cursor:"pointer",margin:"10px 0 5px",listStyle:"none"});
            const arrow=document.createElement("span"); arrow.textContent=" ▼";
            hdr.appendChild(arrow);
            const detailUl=document.createElement("ul");
            Object.assign(detailUl.style,{listStyle:"none",paddingLeft:"15px",display:"block"});
            hdr.addEventListener("click",()=>{
                const show=detailUl.style.display==="none";
                detailUl.style.display=show?"block":"none";
                arrow.textContent=show?" ▲":" ▼";
                this.map.fitBounds(bounds);
            });
            if (Object.keys(byVehicle).length===1) {
                setTimeout(()=>this.map.fitBounds(bounds),100);
            }
            this.recordList.el.appendChild(hdr);
            this.recordList.el.appendChild(detailUl);

            // start/end
            const startRec=recs.find(r=>r.step_type==="start");
            const endRec=  recs.find(r=>r.step_type==="end");
            if(startRec){
                const p={lat:+startRec.partner_latitude,lng:+startRec.partner_longitude};
                bounds.extend(p);
                this.addMarker(p,`Start ${vehLabel}`,"",null,icons.start,markerPositions);
            }
            if(endRec){
                const p={lat:+endRec.partner_latitude,lng:+endRec.partner_longitude};
                bounds.extend(p);
                this.addMarker(p,`End ${vehLabel}`,"",null,icons.end,markerPositions);
            }

            // jobs
            jobs.forEach((job,i)=>{
                const p={lat:+job.partner_latitude,lng:+job.partner_longitude};
                bounds.extend(p);
                const m=this.addMarker(p,job.display_name,job.delivery_address,String(i+1),icons.job,markerPositions);
                const li=document.createElement("li");
                li.style.cursor="pointer";
                let href="#";
                if(job.delivery_order_id) href=`/web#id=${job.delivery_order_id[0]}&model=stock.picking&view_type=form`;
                if(job.task_id)          href=`/web#id=${job.task_id[0]}&model=project.task&view_type=form`;
                const addr=job.delivery_address?`<small class="text-muted d-block">${job.delivery_address}</small>`:"";
                li.innerHTML=`<div><a href="${href}" target="_blank" style="font-weight:bold">${job.display_name}</a></div>${addr}`;
                li.onclick=()=>{
                    this.map.panTo(p); this.map.setZoom(15);
                    google.maps.event.trigger(m,"click");
                };
                detailUl.appendChild(li);
            });

            // GMaps link only for non-admin modes
            if (!isAdmin) {
                const btn=document.createElement("button");
                btn.textContent=_t("View in Google Maps");
                btn.className="btn btn-primary btn-sm o_map_btn m-2";
                btn.onclick=()=>{
                    const pts=[];
                    if(startRec) pts.push(`${+startRec.partner_latitude},${+startRec.partner_longitude}`);
                    jobs.forEach(j=>pts.push(`${+j.partner_latitude},${+j.partner_longitude}`));
                    if(endRec) pts.push(`${+endRec.partner_latitude},${+endRec.partner_longitude}`);
                    if(pts.length>=2){
                        const ori=pts.shift(), dst=pts.pop(), wp=encodeURIComponent(pts.join("|"));
                        window.open(`https://www.google.com/maps/dir/?api=1&origin=${ori}&destination=${dst}&waypoints=${wp}`,"_blank");
                    }
                };
                detailUl.appendChild(btn);
            }

            // polyline
            if(startRec&&endRec){
                const ds=new google.maps.DirectionsService();
                const dr=new google.maps.DirectionsRenderer({
                    map:this.map,suppressMarkers:true,
                    polylineOptions:{strokeColor:col,strokeOpacity:0.8,strokeWeight:4}
                });
                this.mapElements.push(dr);
                ds.route({
                    origin:{lat:+startRec.partner_latitude,lng:+startRec.partner_longitude},
                    destination:{lat:+endRec.partner_latitude,lng:+endRec.partner_longitude},
                    waypoints:jobs.map(j=>({
                        location:{lat:+j.partner_latitude,lng:+j.partner_longitude},
                        stopover:true
                    })),
                    travelMode:google.maps.TravelMode.DRIVING
                },(res,status)=>status===google.maps.DirectionsStatus.OK&&dr.setDirections(res));
            }
        }
    }

    _setupMobileToggle(){
        if(window.innerWidth>768) return;
        const mapLeft=this.recordList.el.parentElement;
        const btn=document.createElement("div");
        btn.className="map-toggle-btn-pure";
        this.mapref.el.parentElement.insertBefore(btn,this.mapref.el);
        let open=false;
        const toggle=show=>{
            open=show;
            mapLeft.classList.toggle("map-panel-visible",open);
            btn.classList.toggle("flipped",open);
            btn.style.left= open?"calc(70% - 16px)":"15px";
        };
        btn.addEventListener("click",e=>{e.stopPropagation();toggle(!open);});
        document.addEventListener("click",e=>{
            if(open&&!mapLeft.contains(e.target)&&e.target!==btn) toggle(false);
        });
    }

    async _getGMapAPIKey(){
        if(!this._gmapApiKey){
            this._gmapApiKey=await this.orm.call("traktop","get_google_map_api_key",[]);
        }
        return this._gmapApiKey;
    }
}

export const unifiedRouteMap = { component: UnifiedRouteMapView };
registry.category("fields").add("unified_route_map", unifiedRouteMap);
